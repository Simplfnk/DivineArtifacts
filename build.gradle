plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'maven-publish'
    id 'idea'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES' //SCAN, REGISTRYDUMP
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods { "${mod_id}" { source sourceSets.main } }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods { "${mod_id}" { source sourceSets.main } }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods { "${mod_id}" { source sourceSets.main } }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods { "${mod_id}" { source sourceSets.main } }
        }
    }
}
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dir 'libs'
    }
    maven { url = "https://maven.theillusivec4.top" }
    maven { url = "https://cursemaven.com" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://code.redspace.io/releases" }
    maven { url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.kosmx.dev/" }
}
dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // MIXIN  *****************************************************************************************************
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    // CURIOS *****************************************************************************************************
    compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api"))
    runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}"))

    // ISS ********************************************************************************************************
    compileOnly fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${minecraft_version}-${irons_spells_version}")
    runtimeOnly fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${minecraft_version}-${irons_spells_version}")

    // GECKOLIB ***************************************************************************************************
    runtimeOnly fg.deobf("software.bernie.geckolib:geckolib-forge-${geckolib_version}")

    // CAELUS *****************************************************************************************************
    runtimeOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}")

    // JEI ********************************************************************************************************
    runtimeOnly fg.deobf("curse.maven:jei-${jei_version}")

    // PLAYER ANIMATOR ********************************************************************************************
    runtimeOnly fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${player_animator_version}")

    // PATCHOULI **************************************************************************************************
   // runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    // APOTHIC *****************************************************************************************************
    compileOnly fg.deobf("curse.maven:apothic-attributes-${attributeslib_version}")
    runtimeOnly fg.deobf("curse.maven:apothic-attributes-${attributeslib_version}")
    runtimeOnly fg.deobf("curse.maven:apotheosis-${apotheosis_version}")

    // PLACEBO *****************************************************************************************************
    runtimeOnly fg.deobf("curse.maven:placebo-${placebo_version}")

    // JEI *********************************************************************************************************
    runtimeOnly(fg.deobf("curse.maven:Jei-238222:4712866"))

    //QOL **********************************************************************************************************
    runtimeOnly fg.deobf("curse.maven:tslatentitystatus-tes-830420:5011935")
    runtimeOnly fg.deobf("curse.maven:mouse-tweaks-60089:4581240")

    // JSON ********************************************************************************************************
    implementation "com.google.code.gson:gson:${gson_version}"

    // configured ******************************************************************************************************
    runtimeOnly fg.deobf("curse.maven:configured-457570:5180900")

}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version      : minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version          : forge_version, forge_version_range: forge_version_range,
        loader_version_range   : loader_version_range,
        mod_id                 : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors            : mod_authors, mod_description: mod_description,
        curios_version         : curios_version,
        caelus_version         : caelus_version,
        player_animator_version: player_animator_version,
        geckolib_version       : geckolib_version
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_name,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "mixins.${mod_id}.json"
        ])
    }
    exclude('**/*.psd')
    exclude('**/*.bbmodel')
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project ], dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

java {
    withSourcesJar()
    //withJavadocJar()
}




tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.register('copyAnimations', Copy) {
    from "src/main/resources/assets/${mod_id}/player_animation"
    include 'casting_animations.json'
    into "src/main/resources/assets/${mod_id}/animations"
}

tasks.classes.dependsOn(tasks.copyAnimations)
tasks.processResources.dependsOn(tasks.copyAnimations)
tasks.sourcesJar.dependsOn(tasks.copyAnimations)

mixin {
    add sourceSets.main, 'divineartifacts.refmap.json'
    config 'mixins.divineartifacts.json'
}
